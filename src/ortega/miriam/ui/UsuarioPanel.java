/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ortega.miriam.ui;

import facturacionmueblesdesktop.exceptions.IllegalOrphanException;
import facturacionmueblesdesktop.exceptions.NonexistentEntityException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.beansbinding.BindingGroup;
import ortega.miriam.controladores.RolJpaController;
import ortega.miriam.controladores.UsuariosJpaController;
import ortega.miriam.entidades.Rol;
import ortega.miriam.entidades.Usuarios;

/**
 *
 */
public class UsuarioPanel extends javax.swing.JPanel {

    public static UsuariosJpaController controlador;

    /**
     * Creates new form RolPanel
     */
    public UsuarioPanel() {
        initComponents();
        controlador = new UsuariosJpaController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager1 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("facturacionMueblesDesktopPU").createEntityManager();
        getRowsQuery = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("Select u from Usuarios u");
        rowCountQuery = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("Select count(u) from Usuarios u");
        list1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : getRowsQuery.getResultList();
        list1=getList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        eliminarBtn = new javax.swing.JButton();
        nuevoBtn = new javax.swing.JButton();
        editarBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.nombres}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.identificacion}"));
        columnBinding.setColumnName("Identificación");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.correo}"));
        columnBinding.setColumnName("Correo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${username}"));
        columnBinding.setColumnName("Usuario");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(240);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 70, 550, 200);

        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });
        add(eliminarBtn);
        eliminarBtn.setBounds(570, 130, 170, 29);

        nuevoBtn.setText("Nuevo");
        nuevoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBtnActionPerformed(evt);
            }
        });
        add(nuevoBtn);
        nuevoBtn.setBounds(570, 70, 170, 29);

        editarBtn.setText("Editar");
        editarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBtnActionPerformed(evt);
            }
        });
        add(editarBtn);
        editarBtn.setBounds(570, 100, 170, 29);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Usuarios");
        add(jLabel1);
        jLabel1.setBounds(220, 10, 190, 30);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        Usuarios user = getIndex();
        if (user != null) {
            String message = "Desea eliminar el registro?";
            String title = "Confirmar eliminación";
            int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                String tipoMensaje = "";
                String tituloMensaje = "";
                int tipoMens = 0;
                try {
                    controlador.destroy(user.getId());
                    tipoMensaje = "El registro ha sido actualizado con éxito";
                    tituloMensaje = "Información";
                    tipoMens = JOptionPane.INFORMATION_MESSAGE;
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(UsuarioPanel.class.getName()).log(Level.SEVERE, null, ex);
                    tipoMensaje = "Existe un problema al eliminar el registro";
                    tituloMensaje = "Error";
                    tipoMens = JOptionPane.ERROR_MESSAGE;
                }

                JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
                actualizar();
            }
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void nuevoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBtnActionPerformed
        abrirFormulario(new Usuarios());
    }//GEN-LAST:event_nuevoBtnActionPerformed

    private final Usuarios getIndex() {
        int index = jTable1.getSelectedRow();
        Usuarios user = null;
        if (index != -1) {
            Long id = (Long) jTable1.getValueAt(index, 0);
            user = controlador.findUsuarios(id);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        return user;
    }
    private void editarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBtnActionPerformed
        Usuarios user = getIndex();
        if (user != null) {
            abrirFormulario(user);
        }

    }//GEN-LAST:event_editarBtnActionPerformed

    private void abrirFormulario(final Usuarios usuario) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() { 
                UsuarioForm dialog = new UsuarioForm(new javax.swing.JFrame(), true, usuario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {

                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public static void crear(Usuarios user) {
        String tipoMensaje = "";
        String tituloMensaje = "";
        int tipoMens = 0;
        controlador.create(user);
        tipoMensaje = "El registro ha sido actualizado con éxito";
        tituloMensaje = "Información";
        tipoMens = JOptionPane.INFORMATION_MESSAGE;
        JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
        UsuarioPanel.actualizar();
    }

    public static void editar(Usuarios user) {
        String tipoMensaje = "";
        String tituloMensaje = "";
        int tipoMens = 0;
        try { 
            controlador.edit(user);
            tipoMensaje = "El registro ha sido actualizado con éxito";
            tituloMensaje = "Información";
            tipoMens = JOptionPane.INFORMATION_MESSAGE;
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(UsuarioForm.class.getName()).log(Level.SEVERE, null, ex);
            tipoMensaje = "Existe un problema al modificar el registro";
            tituloMensaje = "Error";
            tipoMens = JOptionPane.ERROR_MESSAGE;
        } catch (Exception ex) {
            Logger.getLogger(UsuarioForm.class.getName()).log(Level.SEVERE, null, ex);
            tipoMensaje = "Existe un problema al modificar el registro";
            tituloMensaje = "Error";
            tipoMens = JOptionPane.ERROR_MESSAGE;
        }
        JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
        UsuarioPanel.actualizar();
    }

    public static void actualizar() {
        list1.clear();
//        System.out.println("=>"+list1);
        List<Usuarios> users = getList();  
        for (Usuarios user : users) {
            entityManager1.refresh(user);
        }
        list1 = users;

         org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.nombres}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.identificacion}"));
        columnBinding.setColumnName("Identificación");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.correo}"));
        columnBinding.setColumnName("Correo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${username}"));
        columnBinding.setColumnName("Usuario");
        columnBinding.setColumnClass(String.class);
//        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
//        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(240);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editarBtn;
    private javax.swing.JButton eliminarBtn;
    public static javax.persistence.EntityManager entityManager1;
    public static javax.persistence.Query getRowsQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    public static java.util.List<Usuarios> list1;
    private javax.swing.JButton nuevoBtn;
    private static javax.persistence.Query rowCountQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public static List<Usuarios> getList() {
        List<Usuarios> roles = new ResultListJPA<>(rowCountQuery, getRowsQuery);
        return roles;
    }
    
  

}
