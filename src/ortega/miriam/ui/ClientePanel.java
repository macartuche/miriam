/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ortega.miriam.ui;

import facturacionmueblesdesktop.exceptions.IllegalOrphanException;
import facturacionmueblesdesktop.exceptions.NonexistentEntityException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.beansbinding.BindingGroup;
import ortega.miriam.controladores.ClientesJpaController;
import ortega.miriam.controladores.EntidadJpaController;
import ortega.miriam.entidades.Clientes;
import ortega.miriam.entidades.Entidad;
import ortega.miriam.entidades.Rol;
import static ortega.miriam.ui.RolPanel.actualizar;
import static ortega.miriam.ui.RolPanel.controlador;
import static ortega.miriam.ui.RolPanel.jTable1;

/**
 *
 * @author macbookpro
 */
public class ClientePanel extends javax.swing.JPanel {
    
    public static ClientesJpaController controlador;
    public static EntidadJpaController controladorEntidad;

    /**
     * Creates new form ClientePanel
     */
    public ClientePanel() {
        initComponents();
        controlador = new ClientesJpaController();
        controladorEntidad = new EntidadJpaController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager1 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("facturacionMueblesDesktopPU").createEntityManager();
        getRowsQuery = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("Select c from Clientes c");
        list1=getList();
        list1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : getRowsQuery.getResultList();
        rowCountQuery = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("Select count(c) from Clientes c");
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Clientes");
        add(jLabel1);
        jLabel1.setBounds(340, 10, 125, 32);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.nombres}"));
        columnBinding.setColumnName("Nombres");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.identificacion}"));
        columnBinding.setColumnName("Identificación");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.correo}"));
        columnBinding.setColumnName("Correo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.telefono}"));
        columnBinding.setColumnName("Teléfono");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(140);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(17, 56, 750, 275);

        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(770, 60, 120, 29);

        jButton2.setText("Editar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(770, 100, 120, 29);

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(770, 140, 120, 29);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Clientes c = new Clientes();
        c.setEntidadid(new Entidad());
        abrirFormulario(c);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Clientes r = getCliente();
        if (r != null) {
            abrirFormulario(r);
        }        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Clientes r = getCliente();
        if (r != null) {
            String message = "Desea eliminar el registro?";
            String title = "Confirmar eliminación";
            int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                String tipoMensaje = "";
                String tituloMensaje = "";
                int tipoMens = 0;
                try {
                    controlador.destroy(r.getId());
                    tipoMensaje = "El registro ha sido actualizado con éxito";
                    tituloMensaje = "Información";
                    tipoMens = JOptionPane.INFORMATION_MESSAGE;
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(RolPanel.class.getName()).log(Level.SEVERE, null, ex);
                    tipoMensaje = "Existe un problema al eliminar el registro";
                    tituloMensaje = "Error";
                    tipoMens = JOptionPane.ERROR_MESSAGE;
                }

                JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
                actualizar();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private final Clientes getCliente() {
        int index = jTable1.getSelectedRow();
        Clientes cliente = null;
        if (index != -1) {
            Long id = (Long) jTable1.getValueAt(index, 0);
            cliente = controlador.findClientes(id);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        return cliente;
    }
    
    private void abrirFormulario(final Clientes c) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Rol rol = new Rol();
                rol.setEditar(false);
                ClientForm dialog = new ClientForm(new javax.swing.JFrame(), true, c);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public static void crear(Clientes cliente) {
        String tipoMensaje = "";
        String tituloMensaje = "";
        int tipoMens = 0;
        controladorEntidad.create(cliente.getEntidadid());
        controlador.create(cliente);
        tipoMensaje = "El registro ha sido actualizado con éxito";
        tituloMensaje = "Información";
        tipoMens = JOptionPane.INFORMATION_MESSAGE;
        JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
        actualizar();
    }
    
    public static void editar(Clientes cliente) {
        String tipoMensaje = "";
        String tituloMensaje = "";
        int tipoMens = 0;
        try {            
            controladorEntidad.edit(cliente.getEntidadid());
            controlador.edit(cliente);
            tipoMensaje = "El registro ha sido actualizado con éxito";
            tituloMensaje = "Información";
            tipoMens = JOptionPane.INFORMATION_MESSAGE;
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(RolForm.class.getName()).log(Level.SEVERE, null, ex);
            tipoMensaje = "Existe un problema al modificar el registro";
            tituloMensaje = "Error";
            tipoMens = JOptionPane.ERROR_MESSAGE;
        } catch (Exception ex) {
            Logger.getLogger(RolForm.class.getName()).log(Level.SEVERE, null, ex);
            tipoMensaje = "Existe un problema al modificar el registro";
            tituloMensaje = "Error";
            tipoMens = JOptionPane.ERROR_MESSAGE;
        }
        JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
        actualizar();
    }
    
    public static void actualizar() {
        list1.clear();
        List<Clientes> clientes = getList();
        for (Clientes cliente : clientes) {
            entityManager1.refresh(cliente.getEntidadid());
            entityManager1.refresh(cliente);
        }
        list1.addAll(clientes);
        
        BindingGroup bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.nombres}"));
        columnBinding.setColumnName("Nombres");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.identificacion}"));
        columnBinding.setColumnName("Identificación");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.correo}"));
        columnBinding.setColumnName("Correo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidadid.telefono}"));
        columnBinding.setColumnName("Teléfono");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(140);
        }
    }
    
    public static List<Clientes> getList() {
        List<Clientes> clientes = new ResultListJPA<Clientes>(rowCountQuery, getRowsQuery);
        return clientes;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.persistence.EntityManager entityManager1;
    public static javax.persistence.Query getRowsQuery;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    public static java.util.List<Clientes> list1;
    public static javax.persistence.Query rowCountQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
