/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ortega.miriam.ui;
  
import java.math.BigDecimal;
import ortega.miriam.controladores.exceptions.NonexistentEntityException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.beansbinding.BindingGroup;
import ortega.miriam.controladores.ProductoJpaController; 
import ortega.miriam.entidades.Producto;
import ortega.miriam.entidades.Rol;

/**
 *
 * @author macbookpro
 */
public class ProductoPanel extends javax.swing.JPanel {

    public static ProductoJpaController controlador;

    /**
     * Creates new form RolPanel
     */
    public ProductoPanel() {
        initComponents();
        controlador = new ProductoJpaController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager1 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("facturacionMueblesDesktopPU").createEntityManager();
        getRowsQuery = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("Select p from Producto p");
        rowCountQuery = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("Select count(p) from Producto p");
        list1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : getRowsQuery.getResultList();
        list1=getList();
        jPanel1 = new javax.swing.JPanel();
        eliminarBtn = new javax.swing.JButton();
        editarBtn = new javax.swing.JButton();
        nuevoBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abadi MT Condensed Extra Bold", 1, 24))); // NOI18N
        jPanel1.setLayout(null);

        eliminarBtn.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        eliminarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ortega/miriam/imagenes/delete.png"))); // NOI18N
        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });
        jPanel1.add(eliminarBtn);
        eliminarBtn.setBounds(670, 50, 120, 50);

        editarBtn.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        editarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ortega/miriam/imagenes/edit.png"))); // NOI18N
        editarBtn.setText("Editar");
        editarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBtnActionPerformed(evt);
            }
        });
        jPanel1.add(editarBtn);
        editarBtn.setBounds(550, 50, 120, 50);

        nuevoBtn.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        nuevoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ortega/miriam/imagenes/add1.png"))); // NOI18N
        nuevoBtn.setText("Nuevo");
        nuevoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBtnActionPerformed(evt);
            }
        });
        jPanel1.add(nuevoBtn);
        nuevoBtn.setBounds(430, 50, 120, 50);

        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precioCompra}"));
        columnBinding.setColumnName("Precio compra");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precioVenta}"));
        columnBinding.setColumnName("Precio de venta");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${stock}"));
        columnBinding.setColumnName("Stock actual");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${grupoid.nombre}"));
        columnBinding.setColumnName("Grupo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(240);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 110, 770, 230);

        add(jPanel1);
        jPanel1.setBounds(20, 30, 810, 370);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        Producto r = getIndex();
        if (r != null) {
            String message = "Desea eliminar el registro?";
            String title = "Confirmar eliminación";
            int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                String tipoMensaje = "";
                String tituloMensaje = "";
                int tipoMens = 0;
                try {
                    controlador.destroy(r.getId());
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(ProductoPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                tipoMensaje = "El registro ha sido actualizado con éxito";
                tituloMensaje = "Información";
                tipoMens = JOptionPane.INFORMATION_MESSAGE;

                JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
                actualizar();
            }
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void nuevoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBtnActionPerformed
        Producto prod = new Producto();
        prod.setPrecioCompra(BigDecimal.ZERO);
        prod.setPrecioVenta(BigDecimal.ZERO);
        prod.setStock(0);
        prod.setStockMinimo(0);
        prod.setEditar(Boolean.FALSE);
        abrirFormulario(prod);
    }//GEN-LAST:event_nuevoBtnActionPerformed

    private Producto getIndex() {
        int index = jTable1.getSelectedRow();
        Producto producto = null;
        if (index != -1) { 
            producto = list1.get(index);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        return producto;
    }
    private void editarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBtnActionPerformed
        Producto p = getIndex();
        if (p != null) {
            abrirFormulario(p);
        }

    }//GEN-LAST:event_editarBtnActionPerformed

    private void abrirFormulario(final Producto producto) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 
                ProductoForm dialog = new ProductoForm(new javax.swing.JFrame(), true, producto);
                dialog.setLocationRelativeTo(null);
               
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public static void crear(Producto producto) {
        String tipoMensaje = "";
        String tituloMensaje = "";
        int tipoMens = 0;
        controlador.create(producto);
        tipoMensaje = "El registro ha sido actualizado con éxito";
        tituloMensaje = "Información";
        tipoMens = JOptionPane.INFORMATION_MESSAGE;
        JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
        ProductoPanel.actualizar();
    }

    public static void editar(Producto producto) {
        String tipoMensaje = "";
        String tituloMensaje = "";
        int tipoMens = 0;
        try { 
            controlador.edit(producto);
            tipoMensaje = "El registro ha sido actualizado con éxito";
            tituloMensaje = "Información";
            tipoMens = JOptionPane.INFORMATION_MESSAGE;
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(RolForm.class.getName()).log(Level.SEVERE, null, ex);
            tipoMensaje = "Existe un problema al modificar el registro";
            tituloMensaje = "Error";
            tipoMens = JOptionPane.ERROR_MESSAGE;
        } catch (Exception ex) {
            Logger.getLogger(RolForm.class.getName()).log(Level.SEVERE, null, ex);
            tipoMensaje = "Existe un problema al modificar el registro";
            tituloMensaje = "Error";
            tipoMens = JOptionPane.ERROR_MESSAGE;
        }
        JOptionPane.showMessageDialog(null, tipoMensaje, tituloMensaje, tipoMens);
        ProductoPanel.actualizar();
    }

    public static void actualizar() { 
        List<Producto> productos = getList();  
        for (Producto producto : productos) {
            entityManager1.refresh(producto);
        }
        list1 = productos;

        BindingGroup bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        org.jdesktop.swingbinding.JTableBinding jTableBinding
                = org.jdesktop.swingbinding.SwingBindings.
                createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding
                = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precioCompra}"));
        columnBinding.setColumnName("Precio compra");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precioVenta}"));
        columnBinding.setColumnName("Precio de venta");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${stock}"));
        columnBinding.setColumnName("Stock actual");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editarBtn;
    private javax.swing.JButton eliminarBtn;
    public static javax.persistence.EntityManager entityManager1;
    public static javax.persistence.Query getRowsQuery;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    public static java.util.List<Producto> list1;
    private javax.swing.JButton nuevoBtn;
    private static javax.persistence.Query rowCountQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

        public static List<Producto> getList() {
            List<Producto> producto = new ResultListJPA<>(rowCountQuery, getRowsQuery);
            return producto;
        }



}
